/**
 * Simple assembly line balancing problem of type 1
 *
 * Problem description:
 * See https://github.com/fontanf/orproblems/blob/main/orproblems/simpleassemblylinebalancing1.hpp
 *
 * TODO
 *
 */

#pragma once

#include "optimizationtools/utils/utils.hpp"
#include "optimizationtools/containers/indexed_set.hpp"

#include "orproblems/simpleassemblylinebalancing1.hpp"

#include <memory>

namespace treesearchsolver
{
namespace simpleassemblylinebalancing1
{

using namespace orproblems::simpleassemblylinebalancing1;

using GuideId = int64_t;

class BranchingScheme
{

public:

    struct Node
    {
        /** Parent node. */
        std::shared_ptr<Node> parent = nullptr;

        /** Array indicating for each job, if it has been processed. */
        std::vector<bool> jobs;

        /** Last processed job. */
        JobId job_id = -1;

        /** Number of jobs processed. */
        JobId number_of_jobs = 0;

        /** Number of stations in the partial solution. */
        StationId number_of_stations = 0;

        /** Current time at the last station of the partial solution. */
        Time current_station_time = 0;

        /** Sum of the processing time of all processed jobs. */
        Time processing_time_sum = 0;

        /** Bound. */
        StationId bound = -1;

        /** Guide. */
        double guide = 0;

        /** Next child to generate. */
        JobPos next_child_pos = 0;

        /**
         * Boolean indicating if a child node been generated where the new job
         * has been processed at the current station.
         */
        bool next_child_added_in_current_station = false;
    };

    BranchingScheme(
            const Instance& instance):
        instance_(instance),
        sorted_jobs_(instance.number_of_jobs())
    {
        // Initialize sorted_jobs_.
        std::iota(sorted_jobs_.begin(), sorted_jobs_.end(), 0);
        sort(sorted_jobs_.begin(), sorted_jobs_.end(),
                [&instance](JobId job_id_1, JobId job_id_2) -> bool
                {
                    return instance.job(job_id_1).processing_time
                        < instance.job(job_id_2).processing_time;
                });
    }

    inline const std::shared_ptr<Node> root() const
    {
        auto r = std::shared_ptr<Node>(new BranchingScheme::Node());
        r->jobs.resize(instance_.number_of_jobs(), false);
        r->current_station_time = instance_.cycle_time();
        return r;
    }

    inline std::shared_ptr<Node> next_child(
            const std::shared_ptr<Node>& parent) const
    {
        assert(!infertile(parent));
        assert(!leaf(parent));

        // Get the next job to process.
        JobId job_id_next = sorted_jobs_[parent->next_child_pos];

        // Update parent
        parent->next_child_pos++;

        // Check if the job has already been processed.
        if (parent->jobs[job_id_next])
            return nullptr;

        // Check if the predecessors of the job have already been processed.
        for (JobId j_pred: instance_.job(job_id_next).predecessors)
            if (!parent->jobs[j_pred])
                return nullptr;

        // Since children are generated by increasing processing time of the
        // new processed job, if a child node where the new processed job has
        // been assigned to the current station has already been generated,
        // then, as soon as a job doesn't fit in the current station, we stop
        // the children generation.
        Time p = instance_.job(job_id_next).processing_time;
        if (parent->next_child_added_in_current_station
               && parent->current_station_time + p > instance_.cycle_time()) {
            parent->next_child_pos = instance_.number_of_jobs();
            return nullptr;
        }

        // Update parent->next_child_added_in_current_station.
        if (parent->current_station_time + p <= instance_.cycle_time())
            parent->next_child_added_in_current_station = true;

        // Compute new child.
        auto child = std::shared_ptr<Node>(new BranchingScheme::Node());
        child->parent = parent;
        child->job_id = job_id_next;
        child->number_of_jobs = parent->number_of_jobs + 1;
        child->jobs = parent->jobs;
        child->jobs[job_id_next] = true;
        child->processing_time_sum = parent->processing_time_sum + p;
        if (parent->current_station_time + p <= instance_.cycle_time()) {
            child->current_station_time = parent->current_station_time + p;
            child->number_of_stations = parent->number_of_stations;
        } else {
            child->current_station_time = p;
            child->number_of_stations = parent->number_of_stations + 1;
        }
        Time total_time = (child->number_of_stations - 1) * instance_.cycle_time()
                + child->current_station_time;
        Time idle_time = total_time - child->processing_time_sum;
        child->bound = std::ceil(
                (double)(idle_time + instance_.processing_time_sum())
                / instance_.cycle_time());
        double mean_job_processing_time = (double)child->processing_time_sum
            / child->number_of_jobs;
        child->guide = (double)idle_time / total_time
            / std::pow(mean_job_processing_time, 2);
        return child;
    }

    inline bool infertile(
            const std::shared_ptr<Node>& node) const
    {
        assert(node != nullptr);
        return (node->next_child_pos == instance_.number_of_jobs());
    }

    inline bool operator()(
            const std::shared_ptr<Node>& node_1,
            const std::shared_ptr<Node>& node_2) const
    {
        assert(node_1 != nullptr);
        assert(node_2 != nullptr);
        assert(!infertile(node_1));
        assert(!infertile(node_2));
        //if (node_1->number_of_jobs != node_2->number_of_jobs)
        //    return node_1->number_of_jobs < node_2->number_of_jobs;
        if (node_1->guide != node_2->guide)
            return node_1->guide < node_2->guide;
        return node_1.get() < node_2.get();
    }

    inline bool leaf(
            const std::shared_ptr<Node>& node) const
    {
        return node->number_of_jobs == instance_.number_of_jobs();
    }

    bool bound(
            const std::shared_ptr<Node>& node_1,
            const std::shared_ptr<Node>& node_2) const
    {
        if (node_2->number_of_jobs != instance_.number_of_jobs())
            return false;
        return node_1->bound >= node_2->number_of_stations;
    }

    /*
     * Solution pool.
     */

    bool better(
            const std::shared_ptr<Node>& node_1,
            const std::shared_ptr<Node>& node_2) const
    {
        if (node_1->number_of_jobs < instance_.number_of_jobs())
            return false;
        if (node_2->number_of_jobs < instance_.number_of_jobs())
            return true;
        return node_1->number_of_stations < node_2->number_of_stations;
    }

    std::shared_ptr<Node> goal_node(double value) const
    {
        auto node = std::shared_ptr<Node>(new BranchingScheme::Node());
        node->number_of_jobs = instance_.number_of_jobs();
        node->number_of_stations = value;
        return node;
    }

    bool equals(
            const std::shared_ptr<Node>& node_1,
            const std::shared_ptr<Node>& node_2) const
    {
        (void)node_1;
        (void)node_2;
        return false;
    }

    /*
     * Dominances.
     */

    inline bool comparable(
            const std::shared_ptr<Node>&) const
    {
        return true;
    }

    struct NodeHasher
    {
        std::hash<std::vector<bool>> hasher;

        inline bool operator()(
                const std::shared_ptr<Node>& node_1,
                const std::shared_ptr<Node>& node_2) const
        {
            return node_1->jobs == node_2->jobs;
        }

        inline std::size_t operator()(
                const std::shared_ptr<Node>& node) const
        {
            size_t hash = hasher(node->jobs);
            return hash;
        }
    };

    inline NodeHasher node_hasher() const { return NodeHasher(); }

    inline bool dominates(
            const std::shared_ptr<Node>& node_1,
            const std::shared_ptr<Node>& node_2) const
    {
        if (node_1->number_of_stations < node_2->number_of_stations)
            return true;
        if (node_1->number_of_stations == node_2->number_of_stations
                && node_1->current_station_time <= node_2->current_station_time)
            return true;
        return false;
    }

    /*
     * Outputs
     */

    void instance_format(
            std::ostream& os,
            int verbosity_level) const
    {
        instance_.print(os, verbosity_level);
    }

    std::string display(const std::shared_ptr<Node>& node) const
    {
        if (node->number_of_jobs != instance_.number_of_jobs())
            return "";
        return std::to_string(node->number_of_stations);
    }

    void solution_format(
            std::ostream &os,
            const std::shared_ptr<Node>& node,
            int verbosity_level) const
    {
        if (verbosity_level >= 1) {
            os
                << "Number of stations:  " << node->number_of_stations << std::endl
                ;
        }

        if (verbosity_level >= 2) {
            std::vector<std::vector<JobId>> stations(node->number_of_stations);
            std::vector<Time> times(node->number_of_stations, 0);
            for (auto node_tmp = node;
                    node_tmp->parent != nullptr;
                    node_tmp = node_tmp->parent) {
                stations[node_tmp->number_of_stations - 1].push_back(node_tmp->job_id);
                times[node_tmp->number_of_stations - 1] += instance_.job(node_tmp->job_id).processing_time;
            }
            os << std::endl
                << std::setw(12) << "Station"
                << std::setw(12) << "Time"
                << std::setw(12) << "# jobs"
                << std::endl
                << std::setw(12) << "-------"
                << std::setw(12) << "----"
                << std::setw(12) << "------"
                << std::endl;
            for (StationId station_id = 0;
                    station_id < node->number_of_stations;
                    ++station_id) {
                os
                    << std::setw(12) << station_id
                    << std::setw(12) << times[station_id]
                    << std::setw(12) << stations[station_id].size()
                    << std::endl;
            }
        }
    }

    inline void solution_write(
            const std::shared_ptr<Node>& node,
            std::string certificate_path) const
    {
        if (certificate_path.empty())
            return;
        std::ofstream file(certificate_path);
        if (!file.good()) {
            throw std::runtime_error(
                    "Unable to open file \"" + certificate_path + "\".");
        }

        std::vector<std::vector<JobId>> stations(node->number_of_stations);
        for (auto node_tmp = node;
                node_tmp->parent != nullptr;
                node_tmp = node_tmp->parent) {
            stations[node_tmp->number_of_stations - 1].push_back(node_tmp->job_id);
        }

        for (StationId station_id = 0;
                station_id < node->number_of_stations;
                ++station_id) {
            std::reverse(stations[station_id].begin(), stations[station_id].end());
            file << stations[station_id].size();
            for (JobId job_id: stations[station_id])
                file << " " << job_id;
            file << std::endl;
        }
    }

private:

    /** Instance. */
    const Instance& instance_;

    /** Jobs sorted by increasing processing time. */
    mutable std::vector<JobId> sorted_jobs_;

};

}
}
